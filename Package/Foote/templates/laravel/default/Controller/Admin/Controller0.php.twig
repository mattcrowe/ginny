<?php namespace {{ model.bundle }}\Controller\{{ bundle.map }};
/**
 * Generated by Ginny on {{ 'now'|date('m/d/Y h:i A') }}
 *
 * https://github.com/crowefoote/ginny
 */

use BaseController;
use Auth, DateTime, DB, Input, Redirect, Request, Response, Session, Validator, View;
use {{ model.bundle }}\Model\{{ model }};

class {{ model.plural }}Controller extends BaseController
{

    /**
     * Display a listing of {{ model.variables }}
     *
     * @return Response
     */
    public function index()
    {

        $this->data['{{ model.variables }}'] = {{ model }}::all();

        return View::make('{{ model.view }}.index', $this->data);
    }

    /**
    * Show the form for creating a new {{ model.variable }}.
    *
    * @return Response
    */
    public function create()
    {
        $this->data['{{ model.variable }}'] = new {{ model }}();

        return View::make('{{ model.view }}.create', $this->data);
    }

    /**
    * Store a newly created {{ model.variable }} in storage.
    *
    * @return Response
    */
    public function store()
    {

        $input = Input::all();

        $validator = Validator::make($input, {{ model }}::$rules);

        if ($validator->fails()) {
            return Redirect::route('{{ model.route }}.create')
            ->withErrors($validator)
            ->withInput($input);
        }

        ${{ model.variable }} = {{ model }}::create($input);

        Session::flash('success', 'Success! {{ model }} created!');

        return Redirect::route('{{ model.route }}.show', [${{ model.variable }}->id]);
    }

    /**
    * Display the specified {{ model.variable }}.
    *
    * @param  int $id
    * @return Response
    */
    public function show($id)
    {

        $this->data['{{ model.variable }}'] = ${{ model.variable }} = {{ model }}::findOrFail($id);

        return View::make('{{ model.view }}.show', $this->data);
    }

    /**
    * Show the form for editing the specified {{ model.variable }}.
    *
    * @param  int $id
    * @return Response
    */
    public function edit($id)
    {

        $this->data['{{ model.variable }}'] = {{ model }}::findOrFail($id);

        return View::make('{{ model.view }}.edit', $this->data);
    }

    /**
    * Update the specified {{ model.variable }} in storage.
    *
    * @param  int $id
    * @return Response
    */
    public function update($id)
    {

        $input = Input::all();

        $validator = Validator::make($input, {{ model }}::$rules);

        if ($validator->fails()) {
            return Redirect::route('{{ model.route }}.edit', $id)
            ->withErrors($validator)
            ->withInput($input);
        }

        ${{ model.variable }} = {{ model }}::findOrFail($id);

        ${{ model.variable }}->update($input);

        Session::flash('success', 'Success! {{ model }} updated!');

        return Redirect::route('{{ model.route }}.show', [$id]);
    }

    /**
    * Remove the specified {{ model.variable }} from storage.
    *
    * @param  int $id
    * @return Response
    */
    public function destroy($id)
    {
        ${{ model.variable }} = {{ model }}::findOrFail($id);

        {% for relation in model.hasOne %}
        if (!${{ model.variable }}->{{ relation.variable }}->isEmpty()) {
            return Redirect::route('{{ model.route }}.show', $id)
            ->with('error', '{{ model }} has a {{ relation }}. It cannot be deleted.');
        }
        {% endfor %}

        {% for relation in model.hasMany %}
            if (!${{ model.variable }}->{{ relation.variables }}->isEmpty()) {
            return Redirect::route('{{ model.route }}.show', $id)
            ->with('error', '{{ model }} has child {{ relation.plural }}. It cannot be deleted.');
            }
        {% endfor %}

        ${{ model.variable }}->delete();

        Session::flash('success', 'Success! {{ model }} deleted.');

        return Redirect::route('{{ model.route }}.index');
    }

}