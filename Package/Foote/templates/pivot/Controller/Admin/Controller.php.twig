<?php namespace {{ bundle.namespace }}\Controller\{{ bundle.map }};

/**
 * Generated by Ginny on {{ 'now'|date('m/d/Y h:i A') }}
 *
 * https://github.com/mattcrowe/ginny
 */

use TN\Cms\Controller\BaseController;
use Input, Redirect, Response, Session, Validator, View;
use {{ bundle.namespace }}\Model\{{ model }};

{% for relation in model.belongsTo %}
use {{ relation.parent.bundle.namespace }}\Model\{{ relation }};
{% endfor %}

class {{ model.plural }}Controller extends BaseController
{

    /**
     * Display a listing of {{ model.variables }}
     *
     * @return Response
     */
    public function index()
    {

        $qb = {{ model }}::query();

        if (Input::has('f')) {
            $needle = Input::get('f');
            $qb->where(function ($qb) use ($needle) {
                $qb->orWhere('{{ model.titleField }}', 'LIKE', "%$needle%");
            });
        }

        ${{ model.variables }} = $this->paginate($qb);

return View::make('{{ model.view }}.index', compact('{{ model.variables }}'));
}

/**
* Show the form for creating a new {{ model.variable }}.
*
* @return Response
*/
public function create()
{
${{ model.variable }} = new {{ model }}();

{% for relation in model.belongsTo %}
    ${{ relation.variables }} = {{ relation }}::all();
{% endfor %}

return View::make('{{ model.view }}.create', compact('{{ model.variable }}'
{% for relation in model.belongsTo %}
    , '{{ relation.variables }}'
{% endfor %}
));
}

/**
* Store a newly created {{ model.variable }} in storage.
*
* @return Response
*/
public function store()
{

$input = Input::all();

$validator = Validator::make($input, {{ model }}::$rules);

if ($validator->fails()) {
return Redirect::to("{{ model.url }}/create")
->withErrors($validator)
->withInput($input);
}

${{ model.variable }} = {{ model }}::create($input);

Session::flash('success', 'Success! {{ model }} created!');

return Redirect::to("{{ model.url }}/${{ model.variable }}->id");
}

/**
* Display the specified {{ model.variable }}.
*
* @param  int $id
* @return Response
*/
public function show($id)
{
return $this->edit($id);
}

/**
* Show the form for editing the specified {{ model.variable }}.
*
* @param  int $id
* @return Response
*/
public function edit($id)
{

${{ model.variable }} = ${{ model.variable }} = {{ model }}::findOrFail($id);

{% for relation in model.belongsTo %}
    ${{ relation.variables }} = {{ relation }}::all();
    ${{ relation.parent.variable }} = ${{ model.variable }}->{{ relation.parent.variable }};
{% endfor %}

return View::make('{{ model.view }}.edit', compact('{{ model.variable }}'
{% for relation in model.belongsTo %}
    , '{{ relation.variables }}'
    , '{{ relation.parent.variable }}'
{% endfor %}
));
}

/**
* Update the specified {{ model.variable }} in storage.
*
* @param  int $id
* @return Response
*/
public function update($id)
{

$input = Input::all();

$validator = Validator::make($input, {{ model }}::$rules);

if ($validator->fails()) {
return Redirect::to("{{ model.url }}/$id")
->withErrors($validator)
->withInput($input);
}

${{ model.variable }} = {{ model }}::findOrFail($id);

${{ model.variable }}->update($input);

Session::flash('success', 'Success! {{ model }} updated!');

return Redirect::to("{{ model.url }}/${{ model.variable }}->id");
}

/**
* Remove the specified {{ model.variable }} from storage.
*
* @param  int $id
* @return Response
*/
public function destroy($id)
{
${{ model.variable }} = {{ model }}::findOrFail($id);

{% for relation in model.hasOne %}
    if (${{ model.variable }}->{{ relation.variable }}) {
    return Redirect::to("{{ model.url }}/$id")
    ->with('error', '{{ model }} has a {{ relation }}. It cannot be deleted.');
    }
{% endfor %}

        {% for relation in model.hasMany %}
            if (!${{ model.variable }}->{{ relation.variables }}->isEmpty()) {
            return Redirect::to("{{ model.url }}/$id")
            ->with('error', '{{ model }} has child {{ relation.plural }}. It cannot be deleted.');
            }
        {% endfor %}

${{ model.variable }}->delete();

Session::flash('success', 'Success! {{ model }} deleted.');

return Redirect::to("{{ model.url }}");
}

}