<?php namespace {{ model.bundle.namespace }}\Tests\Model;
/**
 * Generated by Ginny on {{ 'now'|date('m/d/Y h:i A') }}
 *
 * https://github.com/mattcrowe/ginny
 */

use {{ model.bundle.namespace }}\Model\{{ model }};
{% for relation in model.belongsTo %}
use {{ relation.parent.bundle.namespace }}\Model\{{ relation.parent }};
{% endfor %}
{% for relation in model.belongsToMany %}
use {{ relation.parent.bundle.namespace }}\Model\{{ relation.parent }};
{% endfor %}
{% for relation in model.hasOne %}
use {{ relation.child.bundle.namespace }}\Model\{{ relation.child }};
{% endfor %}
{% for relation in model.hasMany %}
use {{ relation.child.bundle.namespace }}\Model\{{ relation.child }};
{% endfor %}

class {{ model }}Test extends \TestCase
{

    /**
    * @covers {{ model.bundle.namespace }}\Model\{{ model }}::__toString
    * @covers {{ model.bundle.namespace }}\Model\{{ model }}::getDates
    */
    public function testMisc()
    {
        ${{ model.variable }} = new {{ model }}();
        ${{ model.variable }}->{{ model.titleField }} = 'test';

$this->assertEquals('test', ${{ model.variable }}->__toString());

$this->assertTrue(in_array('created_at', ${{ model.variable }}->getDates()));
$this->assertTrue(in_array('updated_at', ${{ model.variable }}->getDates()));
{% for field in model.fieldsByType('datetime') %}
    $this->assertTrue(in_array('{{ field }}', ${{ model.variable }}->getDates()));
{% endfor %}
}

{% for field in model.fields %}
{% endfor %}

    {% if model.associations.empty == false %}
        /**
        {% for relation in model.belongsTo %}
            * @covers {{ model.bundle.namespace }}\Model\{{ model }}::{{ relation.parent.variable }}
        {% endfor %}
        {% for relation in model.belongsToMany %}
            * @covers {{ model.bundle.namespace }}\Model\{{ model }}::{{ relation.parent.variables }}
        {% endfor %}
        {% for relation in model.hasOne %}
            * @covers {{ model.bundle.namespace }}\Model\{{ model }}::{{ relation.child.variable }}
        {% endfor %}
        {% for relation in model.hasMany %}
            * @covers {{ model.bundle.namespace }}\Model\{{ model }}::{{ relation.child.variables }}
        {% endfor %}
        */
        public function testRelations()
        {
        ${{ model.variable }} = new {{ model }}();
        {% for relation in model.belongsTo %}
            $this->assertNotEmpty(${{ model.variable }}->{{ relation.parent.variable }}());
        {% endfor %}
        {% for relation in model.belongsToMany %}
            $this->assertNotEmpty(${{ model.variable }}->{{ relation.parent.variables }}());
        {% endfor %}
        {% for relation in model.hasOne %}
            $this->assertNotEmpty(${{ model.variable }}->{{ relation.child.variable }}());
        {% endfor %}
        {% for relation in model.hasMany %}
            $this->assertNotEmpty(${{ model.variable }}->{{ relation.child.variables }}());
        {% endfor %}
        }
    {% endif %}

}