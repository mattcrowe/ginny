<?php namespace {{ model.bundle.namespace }}\Model;
/**
 * Generated by Ginny on {{ 'now'|date('m/d/Y h:i A') }}
 *
 * https://github.com/mattcrowe/ginny
 */

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Collection;
use DB, Carbon;

/**
 * \{{ model.bundle.namespace }}\Model\{{ model }}
 *
{% for field in model.fields %}
 * @property {{ field.type }} ${{ field }}
{% endfor %}
 * @property \Carbon\Carbon $updated_at
 * @property \Carbon\Carbon $deleted_at
 * @method static {{ model }} find($value)
 * @method static {{ model }} findOrFail($value)
 */
class {{ model }} extends Model
{

    protected $table = '{{ model.table }}';

    protected $guarded = [];

    public static $rules = [

    {% for field in model.fields %}
        {% if field.name not in ['id'] %}
            {% if field.autoIncrement == false and field.required == true %}
                '{{ field }}' => 'required',
            {% endif %}
        {% endif %}
    {% endfor %}

];

{% for relation in model.belongsTo %}
    public function {{ relation.variable }}()
    {
    return $this->belongsTo('{{ relation.parent.bundle.namespace }}\Model\{{ relation.parent }}', '{{ relation.keys('local') }}', '{{ relation.keys('parent') }}');
    }
{% endfor %}

    {% for relation in model.belongsToMany %}
        public function {{ relation.variables }}()
        {
        return $this->belongsToMany('{{ relation.parent.bundle.namespace }}\Model\{{ relation.parent }}', '{{ relation.pivot.table }}', '{{ relation.keys('pivot_local') }}', '{{ relation.keys('pivot_parent') }}');
        }
    {% endfor %}

    {% for relation in model.hasOne %}
        public function {{ relation.variable }}()
        {
        return $this->hasOne('{{ relation.child.bundle.namespace }}\Model\{{ relation.child }}', '{{ relation.keys('foreign') }}', '{{ relation.keys('local') }}');
        }
    {% endfor %}

    {% for relation in model.hasMany %}
        public function {{ relation.variables }}()
        {
        return $this->hasMany('{{ relation.child.bundle.namespace }}\Model\{{ relation.child }}', '{{ relation.keys('foreign') }}', '{{ relation.keys('local') }}');
        }
    {% endfor %}

public function __toString() {
return $this->{{ model.titleField }};
}

public function getDates()
{
{% filter inline %}

return [
{% for field in model.fieldsByType('datetime') %}
    '{{ field }}',
{% endfor %}
'created_at', 'updated_at'
];

{% endfilter %}

}

}